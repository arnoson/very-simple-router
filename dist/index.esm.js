const t=t=>t.length>1&&t.endsWith("/")?t.slice(0,-1):t;class e{constructor(e,h){e=t(e),this.path=e,this.pattern=e,this.action=h,this.catchAll="*"===e;const{regExp:a,keys:s}=this._parsePattern(e)||{};this.regExp=a,this.keys=s}_parsePattern(t){const e=t.match(/(:[^/]+)/g)?.map((t=>t.substr(1)));return e&&{keys:e,regExp:new RegExp("^"+t.replace(/(:[^/]+)/g,"([^/]+)")+"$")}}match(t){return void 0!==t&&(this.regExp?this._getParams(t.match(this.regExp)):(this.catchAll||t===this.path)&&{})}_getParams(t){if(t){const e={};return this.keys.forEach(((h,a)=>e[h]=t[a+1])),e}}}export default class{constructor({routes:t=[],scrollRestoration:e="manual"}={}){this.routes=[],this.currentRoute=null,this._handleBeforeEach=null,this._handleAfterEach=null,t.forEach((({path:t,action:e})=>this.route(t,e))),window.history.scrollRestoration=e,window.addEventListener("popstate",(()=>this._handleChange(window.location.pathname)))}route(t,h){this.routes.push(new e(t,h))}push(e){window.history.pushState(null,null,t(e)),this._handleChange(e)}replace(e){window.history.replaceState(null,null,t(e)),this._handleChange(e)}init(){this._handleChange(window.location.pathname,!0)}beforeEach(t){this._handleBeforeEach=t}afterEach(t){this._handleAfterEach=t}_handleChange(t,e=!1){for(const h of this.routes){const a=h.match(t);if(a){const{pattern:s}=h;this.currentRoute={path:t,pattern:s,params:a},this._handleBeforeEach?.(this.currentRoute);const n=h.action(a,e);n instanceof Promise?n.then((()=>this._handleAfterEach?.(this.currentRoute))):this._handleAfterEach?.(this.currentRoute);break}}}}
//# sourceMappingURL=index.esm.js.map
