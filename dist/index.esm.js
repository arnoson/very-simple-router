const t=t=>t.length>1&&t.endsWith("/")?t.slice(0,-1):t;class s{constructor(s,e){s=t(s),this.path=s,this.action=e,this.catchAll="*"===s;const{regExp:a,keys:h}=this._parsePattern(s)||{};this.regExp=a,this.keys=h}_parsePattern(t){const s=t.match(/(:[^/]+)/g)?.map((t=>t.substr(1)));return s&&{keys:s,regExp:new RegExp("^"+t.replace(/(:[^/]+)/g,"([^/]+)")+"$")}}match(t){return void 0!==t&&(this.regExp?this._getParams(t.match(this.regExp)):(this.catchAll||t===this.path)&&{})}_getParams(t){if(t){const s={};return this.keys.forEach(((e,a)=>s[e]=t[a+1])),s}}}export default class{constructor({routes:t=[],scrollRestoration:s="manual"}={}){this.routes=[],this.currentRoute=null,t.forEach((({path:t,action:s})=>this.route(t,s))),window.history.scrollRestoration=s,window.addEventListener("popstate",(()=>this._handleChange(window.location.pathname)))}route(t,e){this.routes.push(new s(t,e))}push(s){window.history.pushState(null,null,t(s)),this._handleChange(s)}replace(s){window.history.replaceState(null,null,t(s)),this._handleChange(s)}_handleChange(t){for(const s of this.routes){const e=s.match(t);if(e){this.currentRoute={path:t,params:e},s.action(e);break}}}}
//# sourceMappingURL=index.esm.js.map
