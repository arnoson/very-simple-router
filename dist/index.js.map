{"version":3,"file":"index.js","sources":["../src/utils.js","../src/Route.js","../src/Router.js"],"sourcesContent":["/**\n * Remove a trailing slash from an url if its not root url (`/`).\n * @param {string} str\n */\nexport const stripTrailingSlash = str =>\n  str.length > 1 && str.endsWith('/') ? str.slice(0, -1) : str\n","import { stripTrailingSlash } from './utils.js'\n\n/**\n * @typedef {Object<string, string>} RouteParams\n */\n\n/**\n * @typedef {(params: RouteParams) => any} RouteAction\n */\n\n/**\n * @private\n */\nexport class Route {\n  /**\n   * @param {string} path\n   * @param {RouteAction} action\n   */\n  constructor(path, action) {\n    path = stripTrailingSlash(path)\n\n    this.path = path\n    this.action = action\n    this.catchAll = path === '*'\n\n    const { regExp, keys } = this._parsePattern(path) || {}\n    this.regExp = regExp\n    this.keys = keys\n  }\n\n  /**\n   * @private\n   * @param {string} pattern\n   * @returns {{ keys: Array<string>, regExp: RegExp }}\n   */\n  _parsePattern(pattern) {\n    const keys = pattern.match(/(:[^/]+)/g)?.map(name => name.substr(1))\n    return (\n      keys && {\n        keys,\n        regExp: new RegExp('^' + pattern.replace(/(:[^/]+)/g, '([^/]+)') + '$')\n      }\n    )\n  }\n\n  /**\n   * @param {string} path\n   * @returns {RouteParams | undefined}\n   */\n  match(path) {\n    return (\n      path !== undefined &&\n      (this.regExp\n        ? this._getParams(path.match(this.regExp))\n        : (this.catchAll || path === this.path) && {})\n    )\n  }\n\n  /**\n   * @private\n   * @param {Array<string>} match\n   * @return {RouteParams | undefined}\n   */\n  _getParams(match) {\n    if (match) {\n      /** @type {RouteParams} */\n      const params = {}\n      this.keys.forEach(\n        // The first element in `match` contains the whole string so we have to\n        // offset the index by 1.\n        (key, index) => (params[key] = match[index + 1])\n      )\n      return params\n    }\n  }\n}\n","import { stripTrailingSlash } from './utils.js'\nimport { Route } from './Route.js'\n\nexport class Router {\n  /**\n   * @param {{ routes?: Array, scrollRestoration?: ScrollRestoration }} [options]\n   */\n  // @ts-ignore (typescript doesn't seem to like the empty `{}`)\n  constructor({ routes = [], scrollRestoration = 'manual' } = {}) {\n    /** @type {Array<Route>} */\n    this.routes = []\n    /** @type {{ path: string, params: object }} */\n    this.currentRoute = null\n\n    routes.forEach(({ path, action }) => this.route(path, action))\n    window.history.scrollRestoration = scrollRestoration\n    window.addEventListener('popstate', () =>\n      this._handleChange(window.location.pathname)\n    )\n  }\n\n  /**\n   * Add a new route.\n   * @param {string} path - A path or a pattern (e.g.: `/user/:id`).\n   * @param {import(\"./Route\").RouteAction} action A function that is called\n   * when the route is entered. The route parameters are passed as object.\n   */\n  route(path, action) {\n    this.routes.push(new Route(path, action))\n  }\n\n  /**\n   * Push a new route.\n   * @param {string} path\n   */\n  push(path) {\n    window.history.pushState(null, null, stripTrailingSlash(path))\n    this._handleChange(path)\n  }\n\n  /**\n   * Replace current route with a new route.\n   * @param {string} path\n   */\n  replace(path) {\n    window.history.replaceState(null, null, stripTrailingSlash(path))\n    this._handleChange(path)\n  }\n\n  /**\n   * Search for the first route that matches the path and call the routes\n   * callback.\n   * @private\n   * @param {string} path\n   */\n  _handleChange(path) {\n    for (const route of this.routes) {\n      const params = route.match(path)\n      if (params) {\n        this.currentRoute = { path, params }\n        route.action(params)\n        break\n      }\n    }\n  }\n}\n"],"names":["stripTrailingSlash","str","length","endsWith","slice","Route","path","action","catchAll","this","_parsePattern","regExp","keys","pattern","match","_pattern$match","map","name","substr","RegExp","replace","undefined","_getParams","params","forEach","key","index","Router","routes","scrollRestoration","currentRoute","_this","route","window","history","addEventListener","_handleChange","location","pathname","push","pushState","replaceState"],"mappings":"80CAIO,IAAMA,EAAqB,SAAAC,UAChCA,EAAIC,OAAS,GAAKD,EAAIE,SAAS,KAAOF,EAAIG,MAAM,GAAI,GAAKH,GCQ9CI,wBAKCC,EAAMC,aAChBD,EAAON,EAAmBM,QAErBA,KAAOA,OACPC,OAASA,OACTC,SAAoB,MAATF,QAESG,KAAKC,cAAcJ,IAAS,GAA7CK,IAAAA,OAAQC,IAAAA,UACXD,OAASA,OACTC,KAAOA,yCAQd,SAAcC,SACND,YAAOC,EAAQC,MAAM,iCAAdC,EAA4BC,KAAI,SAAAC,UAAQA,EAAKC,OAAO,aAE/DN,GAAQ,CACNA,KAAAA,EACAD,OAAQ,IAAIQ,OAAO,IAAMN,EAAQO,QAAQ,YAAa,WAAa,2BASzE,SAAMd,eAEOe,IAATf,IACCG,KAAKE,OACFF,KAAKa,WAAWhB,EAAKQ,MAAML,KAAKE,UAC/BF,KAAKD,UAAYF,IAASG,KAAKH,OAAS,8BASjD,SAAWQ,MACLA,EAAO,KAEHS,EAAS,eACVX,KAAKY,kBAGPC,EAAKC,UAAWH,EAAOE,GAAOX,EAAMY,EAAQ,MAExCH,YCrEAI,8FAKiD,OAA9CC,OAAAA,aAAS,SAAIC,kBAAAA,aAAoB,0BAExCD,OAAS,QAETE,aAAe,KAEpBF,EAAOJ,SAAQ,gBAAGlB,IAAAA,KAAMC,IAAAA,cAAawB,EAAKC,MAAM1B,EAAMC,MACtD0B,OAAOC,QAAQL,kBAAoBA,EACnCI,OAAOE,iBAAiB,YAAY,kBAClCJ,EAAKK,cAAcH,OAAOI,SAASC,4CAUvC,SAAMhC,EAAMC,QACLqB,OAAOW,KAAK,IAAIlC,EAAMC,EAAMC,wBAOnC,SAAKD,GACH2B,OAAOC,QAAQM,UAAU,KAAM,KAAMxC,EAAmBM,SACnD8B,cAAc9B,0BAOrB,SAAQA,GACN2B,OAAOC,QAAQO,aAAa,KAAM,KAAMzC,EAAmBM,SACtD8B,cAAc9B,gCASrB,SAAcA,aACQG,KAAKmB,uCAAQ,KAAtBI,UACHT,EAASS,EAAMlB,MAAMR,MACvBiB,EAAQ,MACLO,aAAe,CAAExB,KAAAA,EAAMiB,OAAAA,GAC5BS,EAAMzB,OAAOgB"}